= 像素之间的一些基本关系 =
* 相邻像素(Neighbors of a Pixel)
	- 4邻域(4 neighbors)
	- D邻域(对角邻域）(diagonal neighbors)
	- 8邻域(8 neighbors)
* 邻接(Adjacency)
	- 4邻接
	- 8邻接
	- m邻接
* 路径(Path)
	- 需要指定邻接类型
* 连通性(Connected)
	- 需要指定邻接类型
* 连通分量(Connected Component)
	- 需要指定邻接类型
* 连通集(Connected Set)
	- 需要指定邻接类型
* 区域(Region)
	- 需要指定邻接类型
* 边界(Boundary)
	- 需要指定邻域类型
* 距离

----
邻域和连通是不一样的，邻域只要考虑两个像素的位置关系， 连通不仅要考虑两个像素的位置关系，还要考虑其灰度值满足相似性原则。

== 相邻像素 ==
=== 4邻域 ===
* 像素p(x,y)所相邻的4邻域是
	- (x + 1, y)
	- (x - 1, y)
	- (x, y + 1)
	- (x, y - 1)
* 用$N_4(p)$表示像素p的4邻域
[[local:./4邻域.png|{{local:./4邻域.png|4邻域图片}}]]
=== D邻域 ===
* 像素p(x,y)所相邻的D邻域(对角邻域）是
	- (x + 1, y + 1)
	- (x + 1, y - 1)
	- (x - 1, y + 1)
	- (x - 1, y - 1)
* 用$N_D(p)$表示像素p的D邻域
[[local:./D邻域|{{local:./D邻域.png|D邻域图片}}]]
=== 8邻域 ===
* 像素8邻域的点就是4邻域的点 + D邻域的点
* 用$N_8(p)$表示p的8邻域， $N_8(p) = N_4(p) + N_D(p)$

[[local:./8邻域.png|{{local:./8邻域.png|8邻域图片}}]]


== 像素的连通性 ==
* 连通性是描述`区域`和`边界`的重要概念
* 两个像素连通的必要条件是：
	- 两个像素的位置是否相邻
	- 两个像素的灰度值是否满足特定的相似性准则（或者是否相等）
----

集合`V`是定义连接性的灰度值集合。
=== 4邻接 ===
* 如果像素p和q都在集合$N_4(p)$中，且像素p的值和像素q的值都在集合`V`中，则称这两个像素是4连通的。
[[local:./4邻接.png|{{local:./4邻接.png|4连通图片}}]]
=== 8邻接 ===
* 如果像素p和q都在集合$N_8(p)$中，且像素p的值和像素q的值都在集合`V`中，则称这两个像素是8连通的。
[[local:./8邻接.png|{{local:./8邻接.png|8连通图片}}]]
=== m邻接 ===
* 对于具有值`V`的像素p和q，如果
	- q在集合$N_4(p)$中，或
	- q在集合$N_D(p)$中，并且$N_4(p)$和$N_4(q)$的交集为空（没有值为`V`的像素），则称两个像素是m连通的，即4连通和D连通的混合连通
[[local:./m邻接.png|{{local:./m邻接.png|m连通图片}}]]


8连通存在二义性，所以使用m连通来改进8邻接。


== 路径(Path) ==
* 像素p(x,y)到像素q(s,t)的路径是一系列像素坐标序列,$(x_0,y_0),(x_1,y_1),...,(x_n,y_n)$，路径的长度是n，如果$(x_0,y_0) = (x_n,y_n)$，
则路径是一个闭合路径。

* 根据指定邻接类型的不同，可以分为4-paths,8-paths,m-paths
== 连通性(Connected) == 
* S是图像的一个像素子集
* 像素p和像素q之间存在一条路径，且该路径上的像素点都在集合S中，那么说p和q是连通的。

== 连通分量(Connected Component) ==
* 有了连通性，自然就有了连通分量

== 连通集(Connected Set) ==
* 如果子集S中只有一个连通分量，那么称子集S为连通集。
== 区域(Region) ==
* 如果像素子集R是一个连通集，那么称R是一个区域。
* 如果$R_i U R_j$是一个连通集，那么区域$R_i$和区域$R_j$是邻接的(Adjacency)。
* 不邻接的区域称为disjoint regions
* 对于区域的邻接，只考虑4邻接和8邻接。
* 对于8邻接，下面的两个区域是邻接的。对于4邻接，则是不邻接的。

[[local:./example_of_region_adjacency.png|{{local:./example_of_region_adjacency.png|区域邻接例子图片}}]]

== 边界(Boundary) ==
假设图像包含`K`个不相邻的区域(disjoint regions)，$R_k,k = 1, 2, ..., K$，这些区域都没有碰到图像的边界(border)
设$R_u$是这`K`个区域的并集，$(R_u)^c$是$R_u$的补集。
* 前景 ： 所有在集合$R_u$的像素点称为前景（foreground）
* 背景 ： 所有在集合$(R_u)^c$的像素点称为背景（background）


* 内边界
	- 区域R的内边界，是一些在R中的像素点的集合，这些像素点的邻域中至少有一个点属于$R_c$。
	- 必须指定邻域的类型，4邻域，D邻域，8邻域
	- 如果指定的是4邻域，那么下图中被圈中的1就不属于内边界
	- 如果指定的是8邻域，那么下图中被圈中的1属于内边界

[[local:./内边界例子.png|{{local:./内边界例子.png|内边界例子图片}}]]


* 外边界
	- 区域R的外边界是包围目标区域的像素点的集合，这些像素点的集合都属于背景$R_c$。
	- 下图中，沿着1形成闭合通路的0的集合就是外边界。
[[local:./外边界例子.png|{{local:./外边界例子.png|外边界例子图片}}]]


== 距离 ==
    注意$D_4$和$D_8$`距离`和`路径距离`是不一样的概念。这里的距离`只和`像素点的坐标有关，而考虑路径距离的话，不仅要考虑像素点的坐标，还要考虑像素点像素值的相似性。
* 欧几里得距离（Euclidean Distance）
* 城市距离（City-block Distance）
	-  其中$D_4 = 1$的像素是(x, y)的4邻域
$$
D_4(p, q) = |x - s| + |y - t|
$$

[[local:./城市距离.png|{{local:./城市距离.png|城市距离例子图片}}]]
* 棋盘距离（Chessboard Distance）
	- 其中$D_4 = 1$的像素是(x, y)的4邻域
$$
D_8(p, q) = max(|x - s|, |y - t|)
$$


[[local:./棋盘例子.png|{{local:./棋盘距离.png|棋盘例子图片}}]]

----
== 参考 ==
1. [[http://blog.csdn.net/ddiicey/article/details/73864470|数字图像处理基础之--像素间的关系（邻接/邻接）]]
2. [[http://blog.csdn.net/ningyaliuhebei/article/details/17072049|图像处理基础（三）_像素之间的3种关系]]
3. [[http://blog.csdn.net/carson2005/article/details/27581339|连通区域分析]]
4. [[http://www.cnblogs.com/tiandsp/archive/2013/04/26/3045747.html|内外边界跟踪]]
